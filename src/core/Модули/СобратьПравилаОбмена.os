// #использовать "../"
#Использовать fs

Перем ТекущийПорядок;
Перем ИменаСобытийКонвертации;
Перем ЕстьОшибки; // для остановки сборки, при возникновении ошибки

Процедура ВыполнитьСборку(Знач КаталогИсходников, Знач КаталогСборки) Экспорт
	
	ЕстьОшибки = Ложь;
	ИнициализироватьИмена();	
	ДеревоФайлов = ПолучитьДеревоФайловПоКаталогу(Новый Файл(КаталогИсходников));
	ДеревоПравил = ЗагрузитьКаталогиВДеревоПравил(ДеревоФайлов.Строки[0]);	
	СортироватьДеревоПравил(ДеревоПравил);
	
	ИмяВременногоФайла = ПолучитьXMLПоУзлуДерева(ДеревоПравил.Строки[0]);
	ОбработатьОтступыВXML(ИмяВременногоФайла);
	ФайлКаталог = Новый Файл(КаталогИсходников);
	КопироватьФайл(ИмяВременногоФайла, ОбъединитьПути(КаталогСборки, ФайлКаталог.Имя));
	УдалитьФайлы(ИмяВременногоФайла);

	Сообщить("Собран файл: " + ИмяВременногоФайла);
	
КонецПроцедуры

Функция ПолучитьДеревоФайловПоКаталогу(КорневойКаталог)
	
	Дерево = Новый ДеревоЗначений;
	Дерево.Колонки.Добавить("Имя");
	Дерево.Колонки.Добавить("Путь");
	Дерево.Колонки.Добавить("ЭтоКаталог");
	
	ТекущаяСтрока = Дерево.Строки.Добавить();
	ТекущаяСтрока.Имя = КорневойКаталог.Имя;
	ТекущаяСтрока.Путь = КорневойКаталог.ПолноеИмя;
	ТекущаяСтрока.ЭтоКаталог = КорневойКаталог.ЭтоКаталог();
	
	РазложитьКаталогиВДерево(Дерево, ТекущаяСтрока, ТекущаяСтрока.Путь);
	
	Возврат Дерево;
	
КонецФункции

Процедура РазложитьКаталогиВДерево(Дерево, ТекущаяСтрокаДерева, ТекущийКаталог)

	Файлы = НайтиФайлы(ОбъединитьПути(ТекущийКаталог, ""), "*");
	
	Для Каждого Файл Из Файлы Цикл
		
		НоваяСтрокаДерева = ТекущаяСтрокаДерева.Строки.Добавить();
		НоваяСтрокаДерева.Имя = Файл.Имя;
		НоваяСтрокаДерева.Путь = Файл.ПолноеИмя;
		НоваяСтрокаДерева.ЭтоКаталог = Файл.ЭтоКаталог();
		
		Если НоваяСтрокаДерева.ЭтоКаталог Тогда		
			РазложитьКаталогиВДерево(Дерево, НоваяСтрокаДерева, НоваяСтрокаДерева.Путь);		
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

Функция ЗагрузитьКаталогиВДеревоПравил(ДеревоКаталогов)
	
	ДеревоПравил = ОбщийФункционал.ПолучитьСтруктуруДереваПравил();
	
	КорневойУзел = Неопределено;
	Для Каждого СтрокаДерева Из ДеревоКаталогов.Строки Цикл
		Если Не СтрокаДерева.ЭтоКаталог	И СтрЧислоВхождений(СтрокаДерева.Имя, ".xml") > 0 Тогда
			КорневойУзел = СтрокаДерева;	
		КонецЕсли;
	КонецЦикла;
	
	ИмяКорневогоУзла = СтрЗаменить(КорневойУзел.Имя, ".xml", ""); 
	Если ИмяКорневогоУзла = "ПравилаОбмена" Тогда
		
		УзелПравил = ДобавитьНовуюСтрокуДереваПравил(ДеревоПравил, ИмяКорневогоУзла);	
		Загрузить_РеквизитыКонвертации(КорневойУзел, УзелПравил);
		Загрузить_СобытияКонвертации(ДеревоКаталогов, УзелПравил);
		Для Каждого СтрокаДерева Из ДеревоКаталогов.Строки Цикл
			Если СтрокаДерева.Имя = "Параметры" Тогда
				Загрузить_Параметры(СтрокаДерева, УзелПравил);
			ИначеЕсли СтрокаДерева.Имя = "Обработки" Тогда 
				Загрузить_Обработки(СтрокаДерева, УзелПравил);
			ИначеЕсли СтрокаДерева.Имя = "ПравилаКонвертацииОбъектов" Тогда
				Загрузить_ПравилаКонвертацииОбъектов(СтрокаДерева, УзелПравил);
			ИначеЕсли СтрокаДерева.Имя = "ПравилаВыгрузкиДанных" Тогда
				Загрузить_ПравилаВыгрузкиДанных(СтрокаДерева, УзелПравил);
			ИначеЕсли СтрокаДерева.Имя = "ПравилаОчисткиДанных" Тогда
				Загрузить_ПравилаОчисткиДанных(СтрокаДерева, УзелПравил);
			ИначеЕсли СтрокаДерева.Имя = "Алгоритмы" Тогда
				Загрузить_Алгоритмы(СтрокаДерева, УзелПравил);
			ИначеЕсли СтрокаДерева.Имя = "Запросы" Тогда
				Загрузить_Запросы(СтрокаДерева, УзелПравил);
			КонецЕсли;
		КонецЦикла;
		
	Иначе	
		Сообщить("Тип правил не определен: " + ИмяКорневогоУзла);		
	КонецЕсли;	
	СортироватьДеревоПоПорядку(ДеревоПравил);	
	Возврат ДеревоПравил;
	
КонецФункции

Процедура СортироватьДеревоПравил(Дерево)
	
	Структура = Новый Структура;
	Структура.Вставить("ПравилаОбмена", Новый Массив);
	Структура.ПравилаОбмена.Добавить("ВерсияФормата");
	Структура.ПравилаОбмена.Добавить("Ид");
	Структура.ПравилаОбмена.Добавить("Наименование");
	Структура.ПравилаОбмена.Добавить("ДатаВремяСоздания");
	Структура.ПравилаОбмена.Добавить("Источник");
	Структура.ПравилаОбмена.Добавить("Приемник");
	Структура.ПравилаОбмена.Добавить("ПослеЗагрузкиПравилОбмена");
	Структура.ПравилаОбмена.Добавить("ПередПолучениемИзмененныхОбъектов");
	Структура.ПравилаОбмена.Добавить("ПослеПолученияИнформацииОбУзлахОбмена");
	Структура.ПравилаОбмена.Добавить("ПередВыгрузкойДанных");
	Структура.ПравилаОбмена.Добавить("ПослеВыгрузкиДанных");
	Структура.ПравилаОбмена.Добавить("ПередЗагрузкойДанных");
	Структура.ПравилаОбмена.Добавить("ПослеЗагрузкиДанных");
	Структура.ПравилаОбмена.Добавить("ПередВыгрузкойОбъекта");
	Структура.ПравилаОбмена.Добавить("ПередКонвертациейОбъекта");
	Структура.ПравилаОбмена.Добавить("ПослеВыгрузкиОбъекта");
	Структура.ПравилаОбмена.Добавить("ПередЗагрузкойОбъекта");
	Структура.ПравилаОбмена.Добавить("ПослеЗагрузкиОбъекта");
	Структура.ПравилаОбмена.Добавить("ПередОтправкойИнформацииОбУдалении");
	Структура.ПравилаОбмена.Добавить("ПриПолученииИнформацииОбУдалении");
	Структура.ПравилаОбмена.Добавить("ПослеЗагрузкиПараметров");
	Структура.ПравилаОбмена.Добавить("Параметры");
	Структура.ПравилаОбмена.Добавить("Обработки");
	Структура.ПравилаОбмена.Добавить("ПравилаКонвертацииОбъектов");
	Структура.ПравилаОбмена.Добавить("ПравилаВыгрузкиДанных");
	Структура.ПравилаОбмена.Добавить("ПравилаОчисткиДанных");
	Структура.ПравилаОбмена.Добавить("Алгоритмы");
	Структура.ПравилаОбмена.Добавить("Запросы");
	
	Структура.Вставить("ПравилоПКО", Новый Массив);
	Структура.ПравилоПКО.Добавить("Код");
	Структура.ПравилоПКО.Добавить("Наименование");
	Структура.ПравилоПКО.Добавить("Порядок");
	Структура.ПравилоПКО.Добавить("Описание");
	Структура.ПравилоПКО.Добавить("ПередВыгрузкой");
	Структура.ПравилоПКО.Добавить("ПриВыгрузке");
	Структура.ПравилоПКО.Добавить("ПослеВыгрузки");
	Структура.ПравилоПКО.Добавить("ПослеВыгрузкиВФайл");
	Структура.ПравилоПКО.Добавить("ПередЗагрузкой");
	Структура.ПравилоПКО.Добавить("ПриЗагрузке");
	Структура.ПравилоПКО.Добавить("ПослеЗагрузки");
	Структура.ПравилоПКО.Добавить("ПоследовательностьПолейПоиска");
	Структура.ПравилоПКО.Добавить("НеЗамещать");
	Структура.ПравилоПКО.Добавить("НеЗапоминатьВыгруженные");
	Структура.ПравилоПКО.Добавить("СинхронизироватьПоИдентификатору");
	Структура.ПравилоПКО.Добавить("ПродолжитьПоискПоПолямПоискаЕслиПоИдентификаторуНеНашли");
	Структура.ПравилоПКО.Добавить("НеВыгружатьОбъектыСвойствПоСсылкам");
	Структура.ПравилоПКО.Добавить("НеСоздаватьЕслиНеНайден");
	Структура.ПравилоПКО.Добавить("ИспользоватьБыстрыйПоискПриЗагрузке");
	Структура.ПравилоПКО.Добавить("ГенерироватьНовыйНомерИлиКодЕслиНеУказан");
	Структура.ПравилоПКО.Добавить("ВыгружатьОбъектТолькоПриНаличииНаНегоСсылки");
	Структура.ПравилоПКО.Добавить("ПриПереносеОбъектаПоСсылкеУстанавливатьТолькоGIUD");
	Структура.ПравилоПКО.Добавить("НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике");
	Структура.ПравилоПКО.Добавить("ПриоритетОбъектовОбмена");
	Структура.ПравилоПКО.Добавить("Источник");
	Структура.ПравилоПКО.Добавить("Приемник");
	Структура.ПравилоПКО.Добавить("Свойства");
	Структура.ПравилоПКО.Добавить("Значения");
	
	Структура.Вставить("ПравилоПВД", Новый Массив);
	Структура.ПравилоПВД.Добавить("Код");
	Структура.ПравилоПВД.Добавить("Наименование");
	Структура.ПравилоПВД.Добавить("Порядок");
	Структура.ПравилоПВД.Добавить("Описание");
	Структура.ПравилоПВД.Добавить("Комментарий");
	Структура.ПравилоПВД.Добавить("КодПравилаКонвертации");
	Структура.ПравилоПВД.Добавить("СпособОтбораДанных");
	Структура.ПравилоПВД.Добавить("ОбъектВыборки");
	Структура.ПравилоПВД.Добавить("ВыбиратьДанныеДляВыгрузкиОднимЗапросом");
	Структура.ПравилоПВД.Добавить("НеВыгружатьОбъектыСозданныеВБазеПриемнике");
	Структура.ПравилоПВД.Добавить("ПередОбработкойПравила");
	Структура.ПравилоПВД.Добавить("ПередВыгрузкойОбъекта");
	Структура.ПравилоПВД.Добавить("ПослеВыгрузкиОбъекта");
	Структура.ПравилоПВД.Добавить("ПослеОбработкиПравила");	
	
	Структура.Вставить("ГруппаПравило", Новый Массив);
	Структура.ГруппаПравило.Добавить("Код");
	Структура.ГруппаПравило.Добавить("Наименование");
	Структура.ГруппаПравило.Добавить("Порядок");
	Структура.ГруппаПравило.Добавить("Описание");
	Структура.ГруппаПравило.Добавить("Комментарий");
	
	Структура.Вставить("ГруппаСвойство", Новый Массив);
	Структура.ГруппаСвойство.Добавить("Код");
	Структура.ГруппаСвойство.Добавить("Наименование");
	Структура.ГруппаСвойство.Добавить("Порядок");
	Структура.ГруппаСвойство.Добавить("НеЗамещать");
	Структура.ГруппаСвойство.Добавить("ПолучитьИзВходящихДанных");
	Структура.ГруппаСвойство.Добавить("ВыгружатьГруппуЧерезФайл");
	Структура.ГруппаСвойство.Добавить("Источник");
	Структура.ГруппаСвойство.Добавить("Приемник");
	Структура.ГруппаСвойство.Добавить("ПередОбработкойВыгрузки");
	Структура.ГруппаСвойство.Добавить("ПередВыгрузкой");
	Структура.ГруппаСвойство.Добавить("ПриВыгрузке");
	Структура.ГруппаСвойство.Добавить("ПослеВыгрузки");
	Структура.ГруппаСвойство.Добавить("ПослеОбработкиВыгрузки");
	Структура.ГруппаСвойство.Добавить("Свойство");
	
	
	КорневойУзел = Дерево.Строки[0];	
	ОбработатьСортировкуРекурсивно(КорневойУзел, Структура);	
	КорневойУзел.Строки.Сортировать("Порядок Возвр", Истина);
	
КонецПроцедуры

Процедура Загрузить_РеквизитыКонвертации(ТекущийУзел, КорневойУзел)
	
	Дерево = ЧтениеXMLВДерево(ТекущийУзел.Путь);
	ТекущийПорядок = 1;
	РекурсивноДобавитьВДерево(Дерево.Строки[0], КорневойУзел);		
	
КонецПроцедуры

Процедура Загрузить_СобытияКонвертации(ДеревоКаталогов, КорневойУзел)
	
	СтрокаУзлаСобытий = ДеревоКаталогов.Строки.Найти("Ext", "Имя");
	Если СтрокаУзлаСобытий = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из СтрокаУзлаСобытий.Строки Цикл
		ИмяСобытия = СтрЗаменить(СтрокаДерева.Имя, ".bsl", ""); 
		НоваяСтрокаДерева = ДобавитьНовуюСтрокуДереваПравил(КорневойУзел, СтрЗаменить(СтрокаДерева.Имя, ".bsl", ""),, ПрочитатьИзТекстовогоДокумента(СтрокаДерева.Путь),, ПолучитьПорядокПоИмени(ИмяСобытия));		
	КонецЦикла;
	
КонецПроцедуры

Процедура Загрузить_Параметры(ДеревоКаталогов, КорневойУзел)
	
	ТекущийУзелДереваПравил = ДобавитьНовуюСтрокуДереваПравил(КорневойУзел, "Параметры");
	
	Для Каждого СтрокаДерева Из ДеревоКаталогов.Строки Цикл
		
		СтрокаПоиска = СтрокаДерева.Строки.Найти("Параметр.xml", "Имя");
		Если СтрокаПоиска = Неопределено Тогда
			Сообщить("Не нашли: " + СтрокаДерева.Имя);
			Продолжить;
		КонецЕсли;
		
		ИмяУзла = ОбщийФункционал.УбратьРасширениеИзИмени(СтрокаПоиска.Имя);	
		ТекущийУзел = ДобавитьНовуюСтрокуДереваПравил(ТекущийУзелДереваПравил, ИмяУзла);
		ЗаполнитьДанныеСвойствПриЗагрузке(ТекущийУзел, СтрокаПоиска.Путь);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура Загрузить_Обработки(ДеревоКаталогов, КорневойУзел)
	
	ТекущийУзелДереваПравил = ДобавитьНовуюСтрокуДереваПравил(КорневойУзел, "Обработки");	
	Для Каждого СтрокаДерева Из ДеревоКаталогов.Строки Цикл
		
		СтрокаПоиска = СтрокаДерева.Строки.Найти("Обработка.xml", "Имя");
		Если СтрокаПоиска = Неопределено Тогда
			Сообщить("Не нашли: " + СтрокаДерева.Имя);
			Продолжить;
		КонецЕсли;
		
		ИмяУзла = ОбщийФункционал.УбратьРасширениеИзИмени(СтрокаПоиска.Имя);
		
		ТекущийУзел = ДобавитьНовуюСтрокуДереваПравил(ТекущийУзелДереваПравил, ИмяУзла);
		ЗаполнитьДанныеСвойствПриЗагрузке(ТекущийУзел, СтрокаПоиска.Путь);
		СтрокаПоиска = СтрокаДерева.Строки.Найти("ДвоичныеДанные", "Имя");
		Если СтрокаПоиска <> Неопределено Тогда
			
			ТекущийУзел.Значение = ПрочитатьИзТекстовогоДокумента(СтрокаПоиска.Путь);
			
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура Загрузить_ПравилаКонвертацииОбъектов(ДеревоКаталогов, КорневойУзел)
	
	ТекущийУзелДереваПравил = ДобавитьНовуюСтрокуДереваПравил(КорневойУзел, "ПравилаКонвертацииОбъектов");
	
	Для Каждого СтрокаДерева Из ДеревоКаталогов.Строки Цикл	
		РекурсивноПрочитатьКаталогиГруппИПравил(ТекущийУзелДереваПравил, СтрокаДерева);				
	КонецЦикла;
	
КонецПроцедуры

Процедура Загрузить_ПравилаВыгрузкиДанных(ДеревоКаталогов, КорневойУзел)
	
	ТекущийУзелДереваПравил = ДобавитьНовуюСтрокуДереваПравил(КорневойУзел, "ПравилаВыгрузкиДанных");
	
	Для Каждого СтрокаДерева Из ДеревоКаталогов.Строки Цикл	
		РекурсивноПрочитатьКаталогиГруппИПравил(ТекущийУзелДереваПравил, СтрокаДерева);				
	КонецЦикла;
	
КонецПроцедуры

Процедура Загрузить_ПравилаОчисткиДанных(ДеревоКаталогов, КорневойУзел)
	
	ТекущийУзелДереваПравил = ДобавитьНовуюСтрокуДереваПравил(КорневойУзел, "ПравилаОчисткиДанных");
	
	Для Каждого СтрокаДерева Из ДеревоКаталогов.Строки Цикл	
		РекурсивноПрочитатьКаталогиГруппИПравил(ТекущийУзелДереваПравил, СтрокаДерева);				
	КонецЦикла;
	
КонецПроцедуры

Процедура Загрузить_Алгоритмы(ДеревоКаталогов, КорневойУзел)
	
	УзелАлгоритмы = ДобавитьНовуюСтрокуДереваПравил(КорневойУзел, "Алгоритмы");
	Для Каждого СтрокаДерева Из ДеревоКаталогов.Строки Цикл		
		РекурсивноПрочитатьГруппыИАлгоритмы(УзелАлгоритмы, СтрокаДерева);		
	КонецЦикла;
	
КонецПроцедуры

Процедура Загрузить_Запросы(ДеревоКаталогов, КорневойУзел)
	
	УзелЗапросы = ДобавитьНовуюСтрокуДереваПравил(КорневойУзел, "Запросы");
	Для Каждого СтрокаДерева Из ДеревоКаталогов.Строки Цикл		
		РекурсивноПрочитатьГруппыИЗапросы(УзелЗапросы, СтрокаДерева);		
	КонецЦикла;
	
КонецПроцедуры

Процедура СортироватьДеревоПоПорядку(ДеревоПравил)
	
	ДеревоПравил.Строки.Сортировать("Порядок Возр", Истина);
	
КонецПроцедуры

Процедура ОбработатьСортировкуРекурсивно(ТекущийУзел, СтруктураСортировки)
	
	ИмяПоиска = ТекущийУзел.Имя;
	Если ТекущийУзел.Имя = "Группа" Тогда
		Стоп = 1;	
	КонецЕсли;
	Если ТекущийУзел.Имя = "Группа" И ТекущийУзел.Родитель.Имя = "Свойства" Тогда
		ИмяПоиска = "ГруппаСвойство";	
	ИначеЕсли ТекущийУзел.Имя = "Правило" И ОбщийФункционал.ПроверитьНаличиеПредкаВДереве(ТекущийУзел, "ПравилаКонвертацииОбъектов") Тогда
		ИмяПоиска = "ПравилоПКО";
	ИначеЕсли ТекущийУзел.Имя = "Правило" И ОбщийФункционал.ПроверитьНаличиеПредкаВДереве(ТекущийУзел, "ПравилаВыгрузкиДанных") Тогда
		ИмяПоиска = "ПравилоПВД";
	КонецЕсли;
	МожноСортировать = СтруктураСортировки.Свойство(ИмяПоиска); 
	МассивПоиска = ?(МожноСортировать, СтруктураСортировки[ИмяПоиска], Новый Массив); 
	Для Каждого СтрокаДерева Из ТекущийУзел.Строки Цикл
		
		Если МожноСортировать Тогда
			Индекс = МассивПоиска.Найти(СтрокаДерева.Имя);
			Если Индекс <> Неопределено Тогда
				СтрокаДерева.Порядок = Индекс + 1; 	
			КонецЕсли;
		КонецЕсли;
		
		Если (ТекущийУзел.Имя = "Свойство" Или (ТекущийУзел.Имя = "Группа" И ТекущийУзел.Родитель.Имя = "Свойства")) И СтрокаДерева.Имя = "Порядок" Тогда
			ТекущийУзел.Порядок = Число(СтрокаДерева.Значение);	
		КонецЕсли;
		
		ОбработатьСортировкуРекурсивно(СтрокаДерева, СтруктураСортировки);
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура РекурсивноПрочитатьКаталогиГруппИПравил(КорневойУзел, ТекущаяСтрокаДерева)
	
	СтрокаПоиска = ТекущаяСтрокаДерева.Строки.Найти("Группа.xml", "Имя");
	Если СтрокаПоиска = Неопределено Тогда
		СтрокаПоиска = ТекущаяСтрокаДерева.Строки.Найти("Правило.xml", "Имя");	
	КонецЕсли;
	
	Если СтрокаПоиска = Неопределено Тогда
		Сообщить("Не нашли: " + ТекущаяСтрокаДерева.Имя);
		Возврат;
	КонецЕсли;
	
	ИмяУзла = СтрЗаменить(СтрокаПоиска.Имя, ".xml", "");
	ТекущийУзел = ДобавитьНовуюСтрокуДереваПравил(КорневойУзел, ИмяУзла);	
	ЗаполнитьДанныеСвойствПриЗагрузке(ТекущийУзел, СтрокаПоиска.Путь);
	
	СтрокаУзлаСобытий = ТекущаяСтрокаДерева.Строки.Найти("Ext", "Имя");
	Если Не СтрокаУзлаСобытий = Неопределено Тогда	
		Для Каждого СтрокаДерева Из СтрокаУзлаСобытий.Строки Цикл
			ИмяСобытия = СтрЗаменить(СтрокаДерева.Имя, ".bsl", "");
			НоваяСтрокаДерева = ДобавитьНовуюСтрокуДереваПравил(ТекущийУзел, ИмяСобытия,, ПрочитатьИзТекстовогоДокумента(СтрокаДерева.Путь),, ПолучитьПорядокПоИмени(ИмяСобытия));		
		КонецЦикла;	
	КонецЕсли;
	
	Если ИмяУзла = "Группа" Тогда
		Для Каждого СтрокаДерева Из ТекущаяСтрокаДерева.Строки Цикл	
			Если ОбщийФункционал.ЭтоXMLФайл(СтрокаДерева.Имя) Или СтрокаДерева.Имя = "Ext" Тогда		
				Продолжить;		
			КонецЕсли;	
			РекурсивноПрочитатьКаталогиГруппИПравил(ТекущийУзел, СтрокаДерева);		
		КонецЦикла;
	КонецЕсли;
	
	Если ИмяУзла = "Правило" И Не ОбщийФункционал.ПроверитьНаличиеПредкаВДереве(ТекущийУзел, "ПравилаВыгрузкиДанных") И Не ОбщийФункционал.ПроверитьНаличиеПредкаВДереве(ТекущийУзел, "ПравилаОчисткиДанных") Тогда
		
		СтрокаДереваСвойства = ДобавитьНовуюСтрокуДереваПравил(ТекущийУзел, "Свойства",,,,50);
		КаталогСвойства = ТекущаяСтрокаДерева.Строки.Найти("Свойства", "Имя");
		Если КаталогСвойства <> Неопределено Тогда
			
			Для Каждого СтрокаДерева Из КаталогСвойства.Строки Цикл
				РекурсивноПрочитатьСвойстваПравил(СтрокаДереваСвойства, СтрокаДерева);
			КонецЦикла;
		КонецЕсли;
		
		СтрокаДереваЗначения = ДобавитьНовуюСтрокуДереваПравил(ТекущийУзел, "Значения",,,,100);
		КаталогЗначения = ТекущаяСтрокаДерева.Строки.Найти("Значения", "Имя");
		Если КаталогЗначения <> Неопределено Тогда			
			Для Каждого СтрокаДерева Из КаталогЗначения.Строки Цикл
				
				СтрокаПоиска = СтрокаДерева.Строки.Найти("Значение.xml", "Имя");	
				Если СтрокаПоиска = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ТекущийУзел = ДобавитьНовуюСтрокуДереваПравил(СтрокаДереваЗначения, "Значение");
				ЗаполнитьДанныеСвойствПриЗагрузке(ТекущийУзел, СтрокаПоиска.Путь);
				
			КонецЦикла;					
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЧтениеXMLВДерево(Путь)
	
	Дерево = ОбщийФункционал.ПолучитьСтруктуруДереваПравил();	
	
	XMLФайл = Новый ЧтениеXML;
	XMLФайл.ОткрытьФайл(Путь);
	
	ПрочитатьXMLПоТегам(XMLФайл, Дерево.Строки);
	
	XMLФайл.Закрыть();
	
	Возврат Дерево;
	
КонецФункции

Процедура ПрочитатьXMLПоТегам(XMLФайл, ТекущийНаборСтрок)
	
	Пока XMLФайл.Прочитать() Цикл
		Если XMLФайл.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			НоваяСтрока = ТекущийНаборСтрок.Добавить();
			НоваяСтрока.Имя = XMLФайл.Имя;
			НоваяСтрока.Значение = "";
			НоваяСтрока.ТипСтроки = "Элемент";
			
			Пока XMLФайл.ПрочитатьАтрибут() Цикл
				
				НоваяСтрокаАтрибут = НоваяСтрока.Строки.Добавить();
				НоваяСтрокаАтрибут.Имя = XMLФайл.Имя;
				НоваяСтрокаАтрибут.Значение = XMLФайл.Значение;
				НоваяСтрокаАтрибут.ТипСтроки = "Атрибут";	
				
				Если XMLФайл.Имя = "Имя" Тогда
					НоваяСтрока.Идентификатор =  НоваяСтрокаАтрибут.Значение;
				КонецЕсли;
				
			КонецЦикла;
			
			ПрочитатьXMLПоТегам(XMLФайл, НоваяСтрока.Строки);
			
			
		ИначеЕсли XMLФайл.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			Возврат;
			
		ИначеЕсли XMLФайл.ТипУзла = ТипУзлаXML.Текст Тогда
			
			ТекущийНаборСтрок.Родитель.Значение = XMLФайл.Значение;
			
			Если ТекущийНаборСтрок.Родитель.Имя = "Код" Или ТекущийНаборСтрок.Родитель.Имя = "Номер" Или ТекущийНаборСтрок.Родитель.Имя = "Имя" Тогда
				ТекущийНаборСтрок.Родитель.Родитель.Идентификатор = СокрЛП(XMLФайл.Значение); 	
			ИначеЕсли ТекущийНаборСтрок.Родитель.Имя = "Порядок" Тогда
				ТекущийНаборСтрок.Родитель.Родитель.Порядок = Число(СокрЛП(XMLФайл.Значение));	
			КонецЕсли;
			
		Конецесли;
	КонецЦикла;
	
КонецПроцедуры

Процедура РекурсивноДобавитьВДерево(Источник, ТекущийУзел)
	
	Для Каждого СтрокаДерева Из Источник.Строки Цикл
		НоваяСтрокаДерева = ТекущийУзел.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева, СтрокаДерева);	
		НоваяСтрокаДерева.Порядок = ТекущийПорядок; 
		ТекущийПорядок = ТекущийПорядок + 1;
		
		РекурсивноДобавитьВДерево(СтрокаДерева, НоваяСтрокаДерева);	
	КонецЦикла;
	
КонецПроцедуры

Функция ДобавитьНовуюСтрокуДереваПравил(КорневойУзел, Имя, Идентификатор = "", Значение = "", ТипСтроки = "Элемент", Порядок = 0)
	
	НоваяСтрокаДерева = КорневойУзел.Строки.Добавить();
	НоваяСтрокаДерева.Имя = Имя;
	НоваяСтрокаДерева.Идентификатор = Идентификатор;
	НоваяСтрокаДерева.Значение = Значение;
	НоваяСтрокаДерева.ТипСтроки = ТипСтроки; 
	НоваяСтрокаДерева.Порядок = Число(Порядок);
	
	Возврат НоваяСтрокаДерева;	
	
КонецФункции

Функция ПрочитатьИзТекстовогоДокумента(Путь)
	
	Чтение = Новый ТекстовыйДокумент;
	Чтение.Прочитать(Путь, КодировкаТекста.UTF8);
	Текст = Чтение.ПолучитьТекст();
	Чтение = Неопределено;
	Возврат Текст;
	
КонецФункции

Функция ПолучитьПорядокПоИмени(ИмяСобытия)
	
	Порядок = ИменаСобытийКонвертации.Найти(ИмяСобытия);
	Возврат ?(Порядок = Неопределено, 0, 100 + Порядок + 1);
	
КонецФункции

Процедура ЗаполнитьДанныеСвойствПриЗагрузке(СтрокаДерева, Путь)
	
	ТекущийПорядок = 1;
	
	Дерево = ЧтениеXMLВДерево(Путь);
	КорневойУзелДерева = Дерево.Строки[0];
	СтрокаДерева.Идентификатор = КорневойУзелДерева.Идентификатор;
	СтрокаДерева.Порядок = КорневойУзелДерева.Порядок;
	РекурсивноДобавитьВДерево(КорневойУзелДерева, СтрокаДерева);
	
КонецПроцедуры

Процедура РекурсивноПрочитатьГруппыИАлгоритмы(УзелРодитель, СтрокаДерева)
	
	РекурсивноПрочитатьГруппыАлгоритмыЗапросыОбщий(УзелРодитель, СтрокаДерева);
	
КонецПроцедуры

Процедура РекурсивноПрочитатьГруппыИЗапросы(УзелРодитель, СтрокаДерева)
	
	РекурсивноПрочитатьГруппыАлгоритмыЗапросыОбщий(УзелРодитель, СтрокаДерева, "Запрос");
	
КонецПроцедуры

Процедура РекурсивноПрочитатьГруппыАлгоритмыЗапросыОбщий(УзелРодитель, СтрокаДерева, ИмяУзлаПоискаЭлемента = "Алгоритм")
	
	СтрокаПоиска = СтрокаДерева.Строки.Найти(ИмяУзлаПоискаЭлемента + ".xml", "Имя");
	Если СтрокаПоиска = Неопределено Тогда
		СтрокаПоиска = СтрокаДерева.Строки.Найти("Группа.xml", "Имя");	
	КонецЕсли;
	
	Если СтрокаПоиска = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяУзла = СтрЗаменить(СтрокаПоиска.Имя, ".xml", "");
	
	УзелАлгоритма = ДобавитьНовуюСтрокуДереваПравил(УзелРодитель, ИмяУзла);
	
	ЗаполнитьДанныеСвойствПриЗагрузке(УзелАлгоритма, СтрокаПоиска.Путь);
	
	СтрокаДереваСобытий = СтрокаДерева.Строки.Найти("Ext", "Имя");
	Если СтрокаДереваСобытий <> Неопределено Тогда
		
		СтрокаТекста = СтрокаДереваСобытий.Строки.Найти("Текст.bsl", "Имя");
		Если СтрокаТекста <> Неопределено Тогда
			Текст = ПрочитатьИзТекстовогоДокумента(СтрокаТекста.Путь);
			ДобавитьНовуюСтрокуДереваПравил(УзелАлгоритма, "Текст",,Текст);	
		КонецЕсли;
		
	КонецЕсли;
	
	Если УзелАлгоритма.Имя = "Группа" Тогда
		
		Строки = СтрокаДерева.Строки.НайтиСтроки(Новый Структура("ЭтоКаталог", Истина));  
		Для Каждого ПодчиненнаяСтрока Из Строки Цикл
			РекурсивноПрочитатьГруппыАлгоритмыЗапросыОбщий(УзелАлгоритма, ПодчиненнаяСтрока, ИмяУзлаПоискаЭлемента);	
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РекурсивноПрочитатьСвойстваПравил(СтрокаДереваПравилРодитель, ТекущаяСтрокаДерева)
	
	
	СтрокаПоиска = ТекущаяСтрокаДерева.Строки.Найти("Группа.xml", "Имя");
	Если СтрокаПоиска = Неопределено Тогда
		СтрокаПоиска = ТекущаяСтрокаДерева.Строки.Найти("Свойство.xml", "Имя");		
	КонецЕсли;
	
	Если СтрокаПоиска = Неопределено Тогда
		Сообщить("Не нашли: " + ТекущаяСтрокаДерева.Имя);
		Возврат;
	КонецЕсли;
	
	ИмяУзла = СтрЗаменить(СтрокаПоиска.Имя, ".xml", "");
	ТекущийУзел = ДобавитьНовуюСтрокуДереваПравил(СтрокаДереваПравилРодитель, ИмяУзла);
	
	//свойства из xml
	ЗаполнитьДанныеСвойствПриЗагрузке(ТекущийУзел, СтрокаПоиска.Путь);
	
	СтрокаУзлаСобытий = ТекущаяСтрокаДерева.Строки.Найти("Ext", "Имя");
	Если Не СтрокаУзлаСобытий = Неопределено Тогда	
		Для Каждого СтрокаДерева Из СтрокаУзлаСобытий.Строки Цикл
			ИмяСобытия = СтрЗаменить(СтрокаДерева.Имя, ".bsl", ""); 
			НоваяСтрокаДерева = ДобавитьНовуюСтрокуДереваПравил(ТекущийУзел, СтрЗаменить(СтрокаДерева.Имя, ".bsl", ""),, ПрочитатьИзТекстовогоДокумента(СтрокаДерева.Путь),, ПолучитьПорядокПоИмени(ИмяСобытия));		
		КонецЦикла;	
	КонецЕсли;
	
	Если ИмяУзла = "Группа" Тогда
		Для Каждого СтрокаДерева Из ТекущаяСтрокаДерева.Строки Цикл	
			Если ОбщийФункционал.ЭтоXMLФайл(СтрокаДерева.Имя) Или СтрокаДерева.Имя = "Ext" Тогда		
				Продолжить;		
			КонецЕсли;	
			РекурсивноПрочитатьСвойстваПравил(ТекущийУзел, СтрокаДерева);		
		КонецЦикла;
	КонецЕсли;
	
	
	
КонецПроцедуры

Функция ПолучитьXMLПоУзлуДерева(СтрокаДерева)
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьXML = Новый ЗаписьXML();	
	//Ждем релиза onescript с новым функционалом	
	//ПараметрыЗаписиXML = Новый ПараметрыЗаписиXML("UTF-8", "1.0", Истина, Ложь, Символы.Таб);
	//ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла, ПараметрыЗаписиXML, Истина);
	ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла, "UTF-8");	
	ЗаписатьXMLЭлементаБезКонтроля(ЗаписьXML, СтрокаДерева); 	
	ЗаписьXML.Закрыть();
	Возврат ИмяВременногоФайла;
	
КонецФункции

Процедура ЗаписатьXMLЭлементаБезКонтроля(ЗаписьXML, СтрокаУзла)
	
	Если СтрокаУзла.ТипСтроки = "Атрибут" Тогда
		ЗаписьXML.ЗаписатьАтрибут(СтрокаУзла.Имя, СтрокаУзла.Значение);
		Возврат;
	КонецЕсли;
	
	МассивАтрибутов = Новый Массив;
	МассивСвойств = Новый Массив;
	
	Для Каждого Строка Из СтрокаУзла.Строки Цикл
		
		Если Строка.ТипСтроки = "Атрибут" Тогда
			МассивАтрибутов.Добавить(Строка);	
		Иначе
			МассивСвойств.Добавить(Строка);	
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента(СтрокаУзла.Имя);
	
	Для Каждого Строка Из МассивАтрибутов Цикл	
		ЗаписьXML.ЗаписатьАтрибут(Строка.Имя, Строка.Значение);	
	КонецЦикла;
	
	Для Каждого Строка Из МассивСвойств Цикл
		ЗаписатьXMLЭлементаБезКонтроля(ЗаписьXML, Строка);	
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СтрокаУзла.Значение) Тогда
		ЗначениеЗаписи = ?(СтрокаУзла.Имя = "Текст" Или СтрокаУзла.Имя = "Обработка" Или ИменаСобытийКонвертации.Найти(СтрокаУзла.Имя) <> Неопределено, СокрП(СтрокаУзла.Значение), СтрокаУзла.Значение);
		ЗаписьXML.ЗаписатьТекст(ЗначениеЗаписи);
	КонецЕсли;	
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ИнициализироватьИмена()
	
	СтруктураПараметров = ОбщийФункционал.ПолучитьПараметрыПравил();
	ИменаСобытийКонвертации = СтруктураПараметров.ИменаСобытийКонвертации;
	
КонецПроцедуры

Процедура ОбработатьОтступыВXML(ПутьКФайлу)
	
	ТД = Новый ТекстовыйДокумент;
	ТД.Прочитать(ПутьКФайлу, "UTF-8");
	ЗаписьТекста = Новый ТекстовыйДокумент;
	Для НомерСтроки = 1 По ТД.КоличествоСтрок() Цикл	
		ТекущаяСтрока = ТД.ПолучитьСтроку(НомерСтроки);
		КоличествоПробеловПодряд = 0;
		Для ПорядокСимвола = 1 По СтрДлина(ТекущаяСтрока) Цикл
			
			ТекущийСимвол = Сред(ТекущаяСтрока, ПорядокСимвола, 1); 
			Если ТекущийСимвол = " " Тогда
				КоличествоПробеловПодряд = КоличествоПробеловПодряд + 1;
			Иначе
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		НоваяСтрока = ТекущаяСтрока;
		Если КоличествоПробеловПодряд > 0 Тогда
			Допстрока = "";
			КоличествоОтступов = Цел(КоличествоПробеловПодряд / 4);
			Для Интерация = 1 По КоличествоОтступов Цикл
				Допстрока = Допстрока + Символы.Таб;	
			КонецЦикла;
			
			Если СтрДлина(Допстрока) > 0 И СтрЧислоВхождений(ТекущаяСтрока, "<") > 0 Тогда
				НоваяСтрока = Допстрока + Прав(ТекущаяСтрока, СтрДлина(ТекущаяСтрока) - (КоличествоОтступов * 4)); 	
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока = СтрЗаменить(НоваяСтрока, " />", "/>");
		ЗаписьТекста.ДобавитьСтроку(НоваяСтрока);
	КонецЦикла;
	ЗаписьТекста.Записать(ПутьКФайлу);
	
КонецПроцедуры